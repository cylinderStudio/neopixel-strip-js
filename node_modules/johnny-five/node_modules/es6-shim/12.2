
> es6-shim@0.31.1 test-native /Users/jordan_harband/Dropbox/git/ljharb-es6-shim.git
> npm run jshint-shim && NO_ES6_SHIM=1 mocha test/*.js test/*/*.js


> es6-shim@0.31.1 jshint-shim /Users/jordan_harband/Dropbox/git/ljharb-es6-shim.git
> jshint es6-shim.js test/*.js test/*/*.js



  clean Object.prototype
    Array
      - is on the exported object
      @@iterator
        ✓ uses Symbol.iterator if available
        ✓ has the right default iteration function
      .from()
        1) exists
      .of()
        2) exists
      #copyWithin()
        3) exists
      #find()
        4) exists
      #findIndex()
        5) exists
      ArrayIterator
        #next()
          ✓ should work when applied to an ArrayIterator
          ✓ throws when not applied to an ArrayIterator
      #keys()
        ✓ has the correct name
        ✓ should have the right arity 
        ✓ is not enumerable
        ✓ should not skip sparse keys
        ✓ should be unscopable if Symbols exist
        basic keys iteration
          ✓ should return 0 on first object
          ✓ should return 1 on second object
          ✓ should return 2 on third object
          ✓ should return 3 on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #values()
        ✓ has the correct name
        ✓ has the right arity
        ✓ is not enumerable
        ✓ should not skip sparse values
        ✓ should be unscopable if Symbols exist
        basic list iteration
          ✓ should return 5 on first object
          ✓ should return 10 on second object
          ✓ should return 15 on third object
          ✓ should return 20 on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #entries()
        ✓ has the correct name
        ✓ has the right arity
        ✓ is not enumerable
        ✓ should not skip sparse entries
        ✓ should be unscopable if Symbols exist
        basic list iteration
          ✓ should return [0, 5] on first object
          ✓ should return [1, 10] on second object
          ✓ should return [2, 15] on third object
          ✓ should return [3, 20] on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #fill()
        6) exists
      #forEach()
        7) uses ToLength to clamp negative values to zero
      #map()
        8) uses ToLength to clamp negative values to zero
      #filter()
        9) uses ToLength to clamp negative values to zero
      #some()
        10) uses ToLength to clamp negative values to zero
      #every()
        11) uses ToLength to clamp negative values to zero
      #reduce()
        12) uses ToLength to clamp negative values to zero
      #reduceRight()
        13) uses ToLength to clamp negative values to zero

  polluted Object.prototype
    Array
      - is on the exported object
      @@iterator
        ✓ uses Symbol.iterator if available
        ✓ has the right default iteration function
      .from()
        14) exists
      .of()
        15) exists
      #copyWithin()
        16) exists
      #find()
        17) exists
      #findIndex()
        18) exists
      ArrayIterator
        #next()
          ✓ should work when applied to an ArrayIterator
          ✓ throws when not applied to an ArrayIterator
      #keys()
        ✓ has the correct name
        ✓ should have the right arity 
        ✓ is not enumerable
        ✓ should not skip sparse keys
        ✓ should be unscopable if Symbols exist
        basic keys iteration
          ✓ should return 0 on first object
          ✓ should return 1 on second object
          ✓ should return 2 on third object
          ✓ should return 3 on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #values()
        ✓ has the correct name
        ✓ has the right arity
        ✓ is not enumerable
        ✓ should not skip sparse values
        ✓ should be unscopable if Symbols exist
        basic list iteration
          ✓ should return 5 on first object
          ✓ should return 10 on second object
          ✓ should return 15 on third object
          ✓ should return 20 on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #entries()
        ✓ has the correct name
        ✓ has the right arity
        ✓ is not enumerable
        ✓ should not skip sparse entries
        ✓ should be unscopable if Symbols exist
        basic list iteration
          ✓ should return [0, 5] on first object
          ✓ should return [1, 10] on second object
          ✓ should return [2, 15] on third object
          ✓ should return [3, 20] on fourth object
          ✓ should set done on completing iteration
          ✓ once done it should stay done
      #fill()
        19) exists
      #forEach()
        20) uses ToLength to clamp negative values to zero
      #map()
        21) uses ToLength to clamp negative values to zero
      #filter()
        22) uses ToLength to clamp negative values to zero
      #some()
        23) uses ToLength to clamp negative values to zero
      #every()
        24) uses ToLength to clamp negative values to zero
      #reduce()
        25) uses ToLength to clamp negative values to zero
      #reduceRight()
        26) uses ToLength to clamp negative values to zero

  Collections
    ✓ map iteration
    ✓ set iteration
    Map
      - is on the exported object
      ✓ should exist in global namespace
      27) should have the right arity
      ✓ should has valid getter and setter calls
      ✓ should accept an iterable as argument
      ✓ should not be callable without "new"
      ✓ should be subclassable
      ✓ treats positive and negative zero the same
      ✓ should map values correctly
      ✓ should map empty values correctly
      ✓ should has correct querying behavior
      ✓ should allow NaN values as keys
      ✓ should not have [[Enumerable]] props
      ✓ should allow common ecmascript idioms
      ✓ should has unique constructor
      ✓ Map.prototype.size should throw TypeError
      ✓ should return false when deleting a nonexistent key
      ✓ should have keys, values and size props
      28) should have an iterator that works with Array.from
      ✓ has the right default iteration function
      ✓ should preserve insertion order
      #clear()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should have #clear method
      #keys()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
      #values()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
      #entries()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ throws when called on a non-Map
      #forEach
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should be iterable via forEach
        ✓ should iterate over empty keys
        ✓ should support the thisArg
        ✓ should have a length of 1
        ✓ should not revisit modified keys
        ✓ returns the map from #set() for chaining
        ✓ visits keys added in the iterator
        ✓ visits keys added in the iterator when there is a deletion
        ✓ does not visit keys deleted before a visit
        ✓ should work after deletion of the current key
        29) should convert key -0 to +0
    Set
      - is on the exported object
      ✓ should exist in global namespace
      30) has the right arity
      ✓ returns the set from #add() for chaining
      ✓ should return false when deleting an item not in the set
      ✓ should accept an iterable as argument
      ✓ accepts an array as an argument
      ✓ should not be callable without "new"
      ✓ should be subclassable
      ✓ should has valid getter and setter calls
      31) should work as expected
      ✓ should allow NaN values as keys
      ✓ should not have [[Enumerable]] props
      ✓ should allow common ecmascript idioms
      ✓ should has unique constructor
      ✓ has the right default iteration function
      ✓ should preserve insertion order
      ✓ Set.prototype.size should throw TypeError
      - should throw proper errors when user invokes methods with wrong types of receiver
      #size
        ✓ returns the expected size
      #clear()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should have #clear method
      #keys()
        ✓ is the same object as #values()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
      #values()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ throws when called on a non-Set
      #entries()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
      has an iterator that works with Array.from
        32) requires Array.from to exist
      #forEach
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should be iterable via forEach
        ✓ should iterate over empty keys
        ✓ should support the thisArg
        ✓ should have a length of 1
        ✓ should not revisit modified keys
        ✓ visits keys added in the iterator
        ✓ visits keys added in the iterator when there is a deletion (slow path)
        ✓ visits keys added in the iterator when there is a deletion (fast path)
        ✓ does not visit keys deleted before a visit
        ✓ should work after deletion of the current key
        33) should convert key -0 to +0

  Date
    ✓ when invalid, dates should toString to "Invalid Date"

  Math
    - is on the exported object
    .acosh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      34) should be correct
    .asinh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct for NaN
      ✓ should be correct for zeroes
      ✓ should be correct for Infinities
      ✓ should be correct
    .atanh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
    .cbrt()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
    .clz32()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should have proper uint32 conversion
      ✓ returns 32 for numbers that coerce to 0
    .cosh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct for NaN
      ✓ should be correct for Infinities
      ✓ should be correct for zeroes
      ✓ should be correct
    .expm1()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct for NaN
      ✓ should be correct for zeroes
      ✓ should be correct for Infinity
      ✓ should be correct for arbitrary numbers
      ✓ works with very negative numbers
    .hypot()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
      ✓ should coerce to a number
      ✓ should take more than 3 arguments
      ✓ should have the right length
      ✓ works for very large or small numbers
    .log2()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ is correct for small numbers
      ✓ is correct for edge cases
      ✓ should have the right precision
    .log10
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct for edge cases
      ✓ should have the right precision
    .log1p
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
    .sign()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
    .sinh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      35) should be correct
    .tanh()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      36) should be correct
    .trunc()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct
      ✓ should coerce to a number immediately
    .imul()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be correct for non-numbers
      ✓ should be correct for hex values
      ✓ should be correct
      ✓ should be correct for objects with valueOf
    .round()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ works for edge cases
      ✓ returns 0 for (0,0.5)
      ✓ returns -0 for (-0.5,0)
      ✓ returns 1 / Number.EPSILON + 1 for 1 / Number.EPSILON + 1
      ✓ returns 2 / Number.EPSILON - 1 for 2 / Number.EPSILON - 1
    .fround()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ returns NaN for undefined
      ✓ returns NaN for NaN
      ✓ works for zeroes and infinities
      ✓ returns infinity for large numbers
      ✓ returns zero for really small numbers
      ✓ rounds properly
      ✓ rounds properly with the max float 32
      ✓ rounds properly with the min float 32

  Number
    - is on the exported object
    Number constants
      ✓ should have max safe integer
      ✓ should have min safe integer
      ✓ should have epsilon
    .parseInt()
      ✓ should work
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ is the same object as the global parseInt
    .parseFloat()
      ✓ should work
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
    .isFinite()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should work
      ✓ should not be confused by type coercion
    .isInteger()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be truthy on integers
      ✓ should be false when the type is not number
      ✓ should be false when NaN
      ✓ should be false when ∞
      ✓ should be false when number is not integer
      ✓ should be true when abs(number) is 2^53 or larger
      ✓ should be true when abs(number) is less than 2^53
    .isSafeInteger()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be truthy on integers
      ✓ should be false when the type is not number
      ✓ should be false when NaN
      ✓ should be false when ∞
      ✓ should be false when number is not integer
      ✓ should be false when abs(number) is 2^53 or larger
      ✓ should be true when abs(number) is less than 2^53
    .isNaN()
      ✓ has the right name
      ✓ is not enumerable
      ✓ has the right arity
      ✓ should be truthy only on NaN

  Object
    - is on the exported object
    .getOwnPropertyNames()
      ✓ throws on null or undefined
      37) works on primitives
    .getOwnPropertyDescriptor()
      ✓ throws on null or undefined
      38) works on primitives
    .seal()
      39) works on primitives
    .isSealed()
      40) works on primitives
    .freeze()
      41) works on primitives
    .isFrozen()
      42) works on primitives
    .preventExtensions()
      43) works on primitives
    .isExtensible()
      44) works on primitives
    .keys()
      45) works on strings
      ✓ throws on null or undefined
      46) works on other primitives
    .is()
      ✓ has the right name
      ✓ should have the right arity
      ✓ should compare regular objects correctly
      ✓ should compare 0 and -0 correctly
      ✓ should compare NaNs correctly
    .assign()
      47) exists
    Object.setPrototypeOf()
      argument checking
        ✓ should throw TypeError if first arg is not object
        ✓ should throw TypeError if second arg is not object or null
      set prototype
        ✓ should work
        ✓ should be able to set to null

  Promise
    - is on the exported object
    ✓ ignores non-function .then arguments
    48) does not have extra methods (bad Chrome!)

  Reflect
    49) exists

  RegExp
    - is on the exported object
    constructor
      ✓ allows a regex as the pattern
      ✓ allows a string with flags
      50) allows a regex with flags
      51) works with instanceof
      52) has the right constructor
      53) toStrings properly
      ✓ functions as a boxed primitive wrapper
    #flags
      54) exists
    Object properties
      55) does not have the nonstandard $input property
      ✓ has "input" property
      ✓ has "last match" property
      ✓ has "last paren" property
      ✓ has "leftContext" property
      ✓ has "rightContext" property
      - has "multiline" property
      ✓ has the right globals
      updates RegExp globals
        ✓ has "input"
        ✓ has "multiline"
        ✓ has "lastMatch"
        - has "lastParen"
        ✓ has "lastParen" for less than 11 tokens
        ✓ has "leftContext"
        ✓ has "rightContext"
        ✓ has $1 - $9

  clean Object.prototype
    String
      - is on the exported object
      #repeat()
        56) exists
      #startsWith()
        57) exists
      #endsWith()
        58) exists
      #includes()
        59) exists
      .fromCodePoint()
        60) exists
      #codePointAt()
        61) exists
      #[Symbol.iterator]()
        62) requires Array.from to test
      .raw()
        63) exists
      #trim()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should trim the correct characters
        ✓ should not trim U+0085
        ✓ should trim on both sides
    Annex B
      ✓ has #anchor
      ✓ has #big
      ✓ has #blink
      ✓ has #bold
      ✓ has #fixed
      ✓ has #fontcolor
      ✓ has #fontsize
      ✓ has #italics
      ✓ has #link
      ✓ has #small
      ✓ has #strike
      ✓ has #sub
      ✓ has #sup

  polluted Object.prototype
    String
      - is on the exported object
      #repeat()
        64) exists
      #startsWith()
        65) exists
      #endsWith()
        66) exists
      #includes()
        67) exists
      .fromCodePoint()
        68) exists
      #codePointAt()
        69) exists
      #[Symbol.iterator]()
        70) requires Array.from to test
      .raw()
        71) exists
      #trim()
        ✓ has the right name
        ✓ is not enumerable
        ✓ has the right arity
        ✓ should trim the correct characters
        ✓ should not trim U+0085
        ✓ should trim on both sides
    Annex B
      ✓ has #anchor
      ✓ has #big
      ✓ has #blink
      ✓ has #bold
      ✓ has #fixed
      ✓ has #fontcolor
      ✓ has #fontsize
      ✓ has #italics
      ✓ has #link
      ✓ has #small
      ✓ has #strike
      ✓ has #sub
      ✓ has #sup

  Promise.all
    ✓ should not be enumerable
    ✓ fulfills if passed an empty array
    72) fulfills if passed an empty array-like
    ✓ fulfills if passed an array of mixed fulfilled promises and values
    ✓ rejects if any passed promise is rejected
    ✓ resolves foreign thenables
    ✓ fulfills when passed an sparse array, giving `undefined` for the omitted values
    ✓ does not modify the input array
    ✓ should reject with a TypeError if given a non-iterable
    ✓ should be robust against tampering (1)
    ✓ should be robust against tampering (2)
    73) should be robust against tampering (3)
    74) should be robust against tampering (4)

  Evil promises should not be able to break invariants
    75) resolving to a promise that calls onFulfilled twice

  Promises/A+ Tests
    2.1.2.1: When fulfilled, a promise: must not transition to any other state.
      ✓ already-fulfilled (102ms)
      ✓ immediately-fulfilled (101ms)
      ✓ eventually-fulfilled (105ms)
      ✓ trying to fulfill then immediately reject (102ms)
      ✓ trying to fulfill then reject, delayed (103ms)
      ✓ trying to fulfill immediately then reject delayed (101ms)
    2.1.3.1: When rejected, a promise: must not transition to any other state.
      ✓ already-rejected (105ms)
      ✓ immediately-rejected (102ms)
      ✓ eventually-rejected (103ms)
      ✓ trying to reject then immediately fulfill (104ms)
      ✓ trying to reject then fulfill, delayed (104ms)
      ✓ trying to reject immediately then fulfill delayed (102ms)
    2.2.1: Both `onFulfilled` and `onRejected` are optional arguments.
      2.2.1.1: If `onFulfilled` is not a function, it must be ignored.
        applied to a directly-rejected promise
          ✓ `onFulfilled` is `undefined`
          ✓ `onFulfilled` is `null`
          ✓ `onFulfilled` is `false`
          ✓ `onFulfilled` is `5`
          ✓ `onFulfilled` is an object
        applied to a promise rejected and then chained off of
          ✓ `onFulfilled` is `undefined`
          ✓ `onFulfilled` is `null`
          ✓ `onFulfilled` is `false`
          ✓ `onFulfilled` is `5`
          ✓ `onFulfilled` is an object
      2.2.1.2: If `onRejected` is not a function, it must be ignored.
        applied to a directly-fulfilled promise
          ✓ `onRejected` is `undefined`
          ✓ `onRejected` is `null`
          ✓ `onRejected` is `false`
          ✓ `onRejected` is `5`
          ✓ `onRejected` is an object
        applied to a promise fulfilled and then chained off of
          ✓ `onFulfilled` is `undefined`
          ✓ `onFulfilled` is `null`
          ✓ `onFulfilled` is `false`
          ✓ `onFulfilled` is `5`
          ✓ `onFulfilled` is an object
    2.2.2: If `onFulfilled` is a function,
      2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument.
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (51ms)
      2.2.2.2: it must not be called before `promise` is fulfilled
        ✓ fulfilled after a delay (54ms)
        ✓ never fulfilled (154ms)
      2.2.2.3: it must not be called more than once.
        ✓ already-fulfilled
        ✓ trying to fulfill a pending promise more than once, immediately
        ✓ trying to fulfill a pending promise more than once, delayed (54ms)
        ✓ trying to fulfill a pending promise more than once, immediately then delayed
        ✓ when multiple `then` calls are made, spaced apart in time (153ms)
        ✓ when `then` is interleaved with fulfillment
    2.2.3: If `onRejected` is a function,
      2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument.
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (52ms)
      2.2.3.2: it must not be called before `promise` is rejected
        ✓ rejected after a delay (54ms)
        ✓ never rejected (155ms)
      2.2.3.3: it must not be called more than once.
        ✓ already-rejected
        ✓ trying to reject a pending promise more than once, immediately
        ✓ trying to reject a pending promise more than once, delayed (54ms)
        ✓ trying to reject a pending promise more than once, immediately then delayed
        ✓ when multiple `then` calls are made, spaced apart in time (154ms)
        ✓ when `then` is interleaved with rejection
    2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code.
      `then` returns before the promise becomes fulfilled or rejected
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (53ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (53ms)
      Clean-stack execution ordering tests (fulfillment case)
        ✓ when `onFulfilled` is added immediately before the promise is fulfilled
        ✓ when `onFulfilled` is added immediately after the promise is fulfilled
        ✓ when one `onFulfilled` is added inside another `onFulfilled`
        ✓ when `onFulfilled` is added inside an `onRejected`
        ✓ when the promise is fulfilled asynchronously
      Clean-stack execution ordering tests (rejection case)
        ✓ when `onRejected` is added immediately before the promise is rejected
        ✓ when `onRejected` is added immediately after the promise is rejected
        ✓ when `onRejected` is added inside an `onFulfilled`
        ✓ when one `onRejected` is added inside another `onRejected`
        ✓ when the promise is rejected asynchronously
    2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value).
      strict mode
        ✓ fulfilled
        ✓ rejected
      sloppy mode
        ✓ fulfilled
        ✓ rejected
    2.2.6: `then` may be called multiple times on the same promise.
      2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`.
        multiple boring fulfillment handlers
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
        multiple fulfillment handlers, one of which throws
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (52ms)
        results in multiple branching chains with their own fulfillment values
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (55ms)
        `onFulfilled` handlers are called in the original order
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          even when one handler is added inside another handler
            ✓ already-fulfilled
            ✓ immediately-fulfilled
            ✓ eventually-fulfilled (70ms)
      2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`.
        multiple boring rejection handlers
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (56ms)
        multiple rejection handlers, one of which throws
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (54ms)
        results in multiple branching chains with their own fulfillment values
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (56ms)
        `onRejected` handlers are called in the original order
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (51ms)
          even when one handler is added inside another handler
            ✓ already-rejected
            ✓ immediately-rejected
            ✓ eventually-rejected (72ms)
    2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)`
      ✓ is a promise
      2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)`
        ✓ see separate 3.3 tests
      2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason.
        The reason is `undefined`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (53ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        The reason is `null`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (55ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        The reason is `false`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (53ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (53ms)
        The reason is `0`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        The reason is an error
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (54ms)
        The reason is an error without a stack
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (52ms)
        The reason is a date
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (55ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (54ms)
        The reason is an object
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (51ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        The reason is an always-pending thenable
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (52ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        The reason is a fulfilled promise
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (54ms)
        The reason is a rejected promise
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
      2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value.
        `onFulfilled` is `undefined`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
        `onFulfilled` is `null`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (54ms)
        `onFulfilled` is `false`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (50ms)
        `onFulfilled` is `5`
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (55ms)
        `onFulfilled` is an object
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (53ms)
        `onFulfilled` is an array containing a function
          ✓ already-fulfilled
          ✓ immediately-fulfilled
          ✓ eventually-fulfilled (55ms)
      2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason.
        `onRejected` is `undefined`
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (55ms)
        `onRejected` is `null`
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (53ms)
        `onRejected` is `false`
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (51ms)
        `onRejected` is `5`
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (54ms)
        `onRejected` is an object
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (52ms)
        `onRejected` is an array containing a function
          ✓ already-rejected
          ✓ immediately-rejected
          ✓ eventually-rejected (51ms)
    2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason.
      ✓ via return from a fulfilled promise
      ✓ via return from a rejected promise
    2.3.2: If `x` is a promise, adopt its state
      2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.
        ✓ via return from a fulfilled promise (103ms)
        ✓ via return from a rejected promise (104ms)
      2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.
        `x` is already-fulfilled
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `x` is eventually-fulfilled
          ✓ via return from a fulfilled promise (53ms)
          ✓ via return from a rejected promise (55ms)
      2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.
        `x` is already-rejected
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `x` is eventually-rejected
          ✓ via return from a fulfilled promise (55ms)
          ✓ via return from a rejected promise (54ms)
    2.3.3: Otherwise, if `x` is an object or function,
      2.3.3.1: Let `then` be `x.then`
        `x` is an object with null prototype
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `x` is an object with normal Object.prototype
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `x` is a function
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
      2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason.
        `e` is `undefined`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is `null`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is `false`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is `0`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is an error
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is an error without a stack
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is a date
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is an object
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is an always-pending thenable
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is a fulfilled promise
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `e` is a rejected promise
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
      2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise`
        Calls with `x` as `this` and two function arguments
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        Uses the original value of `then`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`
          `y` is not a thenable
            `y` is `undefined`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is `null`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is `false`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is `5`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an object
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an array
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
          `y` is a thenable
            `y` is a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (56ms)
            `y` is a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (53ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (56ms)
          `y` is a thenable for a thenable
            `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (50ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (55ms)
            `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (53ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (56ms)
            `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (58ms)
            `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (52ms)
            `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (53ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (57ms)
                ✓ via return from a rejected promise (56ms)
            `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (54ms)
            `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (50ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (52ms)
            `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that tries to fulfill twice for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (56ms)
            `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (55ms)
            `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is a thenable that fulfills but then throws for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (52ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (56ms)
            `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (51ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (56ms)
            `y` is an already-fulfilled promise for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise
                ✓ via return from a rejected promise
            `y` is an already-fulfilled promise for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (55ms)
            `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (57ms)
            `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (57ms)
                ✓ via return from a rejected promise (56ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (57ms)
            `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (51ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (56ms)
            `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (55ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (56ms)
            `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (52ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (55ms)
            `y` is an eventually-fulfilled promise for an already-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (51ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (55ms)
            `y` is an eventually-fulfilled promise for an eventually-fulfilled promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (56ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (57ms)
            `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (51ms)
                ✓ via return from a rejected promise (52ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (53ms)
            `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (57ms)
                ✓ via return from a rejected promise (56ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (58ms)
                ✓ via return from a rejected promise (55ms)
            `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (52ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (53ms)
                ✓ via return from a rejected promise (57ms)
            `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then`
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (51ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (54ms)
            `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (54ms)
                ✓ via return from a rejected promise (53ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (58ms)
                ✓ via return from a rejected promise (54ms)
            `y` is an eventually-fulfilled promise for an already-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (53ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (54ms)
            `y` is an eventually-fulfilled promise for an eventually-rejected promise
              `then` calls `resolvePromise` synchronously
                ✓ via return from a fulfilled promise (55ms)
                ✓ via return from a rejected promise (54ms)
              `then` calls `resolvePromise` asynchronously
                ✓ via return from a fulfilled promise (56ms)
                ✓ via return from a rejected promise (52ms)
        2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`
          `r` is `undefined`
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is `null`
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is `false`
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is `0`
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is an error
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is an error without a stack
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is a date
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is an object
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is an always-pending thenable
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is a fulfilled promise
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          `r` is a rejected promise
            `then` calls `rejectPromise` synchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `then` calls `rejectPromise` asynchronously
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
        2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.
          calling `resolvePromise` then `rejectPromise`, both synchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` synchronously then `rejectPromise` asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` then `rejectPromise`, both asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously
            ✓ via return from a fulfilled promise (54ms)
            ✓ via return from a rejected promise (55ms)
          calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously
            ✓ via return from a fulfilled promise (54ms)
            ✓ via return from a rejected promise (52ms)
          calling `rejectPromise` then `resolvePromise`, both synchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `rejectPromise` synchronously then `resolvePromise` asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `rejectPromise` then `resolvePromise`, both asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` twice synchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` twice, first synchronously then asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` twice, both times asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously
            ✓ via return from a fulfilled promise (53ms)
            ✓ via return from a rejected promise (52ms)
          calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously
            ✓ via return from a fulfilled promise (55ms)
            ✓ via return from a rejected promise (54ms)
          calling `rejectPromise` twice synchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `rejectPromise` twice, first synchronously then asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          calling `rejectPromise` twice, both times asynchronously
            ✓ via return from a fulfilled promise
            ✓ via return from a rejected promise
          saving and abusing `resolvePromise` and `rejectPromise`
            ✓ via return from a fulfilled promise (103ms)
            ✓ via return from a rejected promise (104ms)
        2.3.3.3.4: If calling `then` throws an exception `e`,
          2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.
            `resolvePromise` was called with a non-thenable
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `resolvePromise` was called with an asynchronously-fulfilled promise
              ✓ via return from a fulfilled promise (55ms)
              ✓ via return from a rejected promise (55ms)
            `resolvePromise` was called with an asynchronously-rejected promise
              ✓ via return from a fulfilled promise (54ms)
              ✓ via return from a rejected promise (53ms)
            `rejectPromise` was called
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `resolvePromise` then `rejectPromise` were called
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `rejectPromise` then `resolvePromise` were called
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
          2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.
            straightforward case
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `resolvePromise` is called asynchronously before the `throw`
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
            `rejectPromise` is called asynchronously before the `throw`
              ✓ via return from a fulfilled promise
              ✓ via return from a rejected promise
      2.3.3.4: If `then` is not a function, fulfill promise with `x`
        `then` is `5`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `then` is an object
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `then` is an array containing a function
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `then` is a regular expression
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
        `then` is an object inheriting from `Function.prototype`
          ✓ via return from a fulfilled promise
          ✓ via return from a rejected promise
    2.3.4: If `x` is not an object or function, fulfill `promise` with `x`
      The value is `undefined`
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (52ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (54ms)
      The value is `null`
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (54ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (55ms)
      The value is `false`
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (51ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (55ms)
      The value is `true`
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (54ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (55ms)
      The value is `0`
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (53ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (54ms)
      The value is `true` with `Boolean.prototype` modified to have a `then` method
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (52ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (55ms)
      The value is `1` with `Number.prototype` modified to have a `then` method
        ✓ already-fulfilled
        ✓ immediately-fulfilled
        ✓ eventually-fulfilled (52ms)
        ✓ already-rejected
        ✓ immediately-rejected
        ✓ eventually-rejected (50ms)

  Promises/ES6 Tests
    25.4.4.1 Promise.all( iterable )
      ✓ is a function
      ✓ has a length property whose value is 1
      ✓ throws if 'this' is not a Promise constructor
      ✓ should immediately reject for non-iterable argument
    25.4.4.1 Promise.all with 0-element array
      ✓ should accept an empty array
      ✓ should return a resolved promise whose result is empty array
    25.4.4.1 Promise.all with 1-element array
      ✓ should accept an array of one promise
      ✓ should resolve immediately
      ✓ should reject immediately
    25.4.4.1 with 2-element array
      ✓ should accept an array of two promises
      ✓ should not resolve immediately when one of a two-promise array resolves
      ✓ should should execute 'then' methods in sequence
      ✓ should reject immediately when the first member of a two-promise array rejects
      ✓ should reject immediately when the second member of a two-promise array rejects
    25.4.3 The Promise Constructor
      ✓ is the initial value of the Promise property of the global object
      - can be called as a function
      - can be used as the value in an extends clause
    25.4.3.1 Promise ( executor )
      ✓ throws TypeError when 'this' is not of type Object
      ✓ throws TypeError if 'this' is a constructed, but unresolved Promise
      ✓ throws TypeError if 'this' is a resolved Promise
      ✓ throws TypeError if 'executor' is not Callable
    25.4.3.1.1 InitializePromise ( promise, executor )
      - returns a promise
      ✓ invokes the executor with 'this' = 'undefined'
      ✓ catches exceptions thrown from executor and turns them into reject
      - returns a promise either in the 'pending' or 'rejected' state
    25.4.3.2 new Promise ( ... argumentsList )
      - is a constructor call
    25.4.4 Properties of the Promise Constructor
      - has a [[Protoype]] internal slot whose value is the Function prototype object
      ✓ has a length property whose value is 1
    Promise constructor
      ✓ is provided
      ✓ returns a new Promise
    incorrect subclassing:
      25.4.1.6.1 step 8 invalid 'resolve':
        76) throws TypeError with Promise.reject
        ✓ provides a resolve which is not a function
        77) throws TypeError with Promise.all
        78) throws TypeError with Promise.race
        ✓ throws TypeError with Promise.resolve
        ✓ throws TypeError with Promise.then
      25.4.1.6.1 step 9 invalid 'reject'
        ✓ provides a reject which is not a function
        ✓ throws TypeError with Promise.all
        ✓ throws TypeError with Promise.race
        79) throws TypeError with Promise.resolve
        ✓ throws TypeError with Promise.reject
        ✓ throws TypeError with Promise.then
    25.4.4.2 Promise.prototype
      ✓ is the Promise prototype object
      - has attribute [[Writable]]: false
      - has attribute [[Enumerable]]: false
      - has attribute [[Configurable]]: false
    25.4.5 Properties of the Promise Prototype Object
      - is an ordinary object
      - is not a Promise
    25.4.5.1 Promise.prototype.catch( onRejected )
      - is a function
      - expects 'this' to be a Promise
      - takes one argument, a function
      - is equivalent to 'promise.then(undefined, fn)'
    25.4.5.2 Promise.prototype.constructor
      - is an object
      - is a function
      - is the Promise constructor
    25.4.5.3 Promise.prototype.then
      - is a function
      - expects 'this' to be a Promise
      - throws TypeError if 'this' is not a Promise
      - takes two arguments, both optional, both functions
      - has default on resolve: identity
      ✓ has default on reject: thrower
      - does not call either function immediately if promise status is 'pending'
      - does call onFulfilled immediately if promise status is 'fulfilled'
      - never calls onRejected if promise status is 'fulfilled'
      - never calls onFullfilled if promise status is 'rejected'
      - does call onRejected immediately if promise status is 'rejected'
      - returns its 'this' argument if it is of type 'Promise'
      - returns a Promise-wrapped version of 'this' if 'this' is not of type 'Promise'
    25.4.4.3 Promise.race( iterable )
      ✓ is a function
      ✓ expects one argument
      ✓ should immediately reject for non-iterable argument
      ✓ requires 'this' to be a constructor function that supports the parameter conventions of the Promise constructor
      - requires 'this' to provide a 'resolve' method
    25.4.4.3 Promise.race with 0-element array
      ✓ should accept an empty array
      ✓ should return a pending promise
    25.4.4.3 Promise.race with 1-element array
      ✓ should accept an array of one promise
      ✓ should reject immediately
    25.4.4.3 Promise.race with 2-element array
      ✓ should accept an array of two promises
      ✓ should resolve immediately when first resolves
      ✓ should resolve immediately when second resolves
      ✓ should reject immediately when first rejects
      ✓ should fulfill immediately with first fulfilled promise in array
      ✓ should reject immediately when second rejects
    25.4.4.4 Promise.reject( x )
      ✓ is a function
      ✓ expects one argument
      ✓ always creates a new promise using 'this' as constructor
      ✓ throws if 'this' is not a constructor
      ✓ always returns a rejected promise
    25.4.4.5 Promise.resolve( x )
      ✓ is a function
      ✓ expects one argument
      ✓ passes through a resolved promise created with the same constructor as 'this'
      ✓ passes through an unsettled promise created with the same constructor as 'this'
      ✓ creates a new promise using the supplied constructor
      ✓ throws if 'this' is not a constructor
      ✓ can return a resolved promise
      ✓ can return a pending promise
      ✓ can return a rejected promise
      - can pass through a subclassed promise if passed a subclassed promise
    Sequencing tests from promises-aplus/issue #61
      ✓ T1
      ✓ T2a
      ✓ T2b

  Promise.race
    ✓ should not be enumerable
    ✓ should fulfill if all promises are settled and the ordinally-first is fulfilled
    ✓ should reject if all promises are settled and the ordinally-first is rejected
    ✓ should settle in the same way as the first promise to settle (204ms)
    ✓ should never settle when given an empty iterable (299ms)
    ✓ should reject with a TypeError if given a non-iterable

  Promise.reject
    ✓ should not be enumerable
    ✓ should return a rejected promise

  Promise.resolve
    ✓ should not be enumerable
    ✓ should return a resolved promise

  Promise
    ✓ sanity check: a fulfilled promise calls its fulfillment handler
    ✓ directly resolving the promise with itself
    ✓ Stealing a resolver and using it to trigger possible reentrancy bug (#83)

  Support user subclassing of Promise
    80) should work if you do it right
    ✓ should throw if you inherit incompletely
    ✓ should throw if you don't inherit at all


  1338 passing (14s)
  46 pending
  80 failing

  1) clean Object.prototype Array .from() exists:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/array.js:44:33)

  2) clean Object.prototype Array .of() exists:
     AssertionError: expected [Function: Array] to have a property 'of'
      at Context.<anonymous> (test/array.js:250:33)

  3) clean Object.prototype Array #copyWithin() exists:
     AssertionError: expected [] to have a property 'copyWithin'
      at Context.<anonymous> (test/array.js:289:43)

  4) clean Object.prototype Array #find() exists:
     AssertionError: expected [] to have a property 'find'
      at Context.<anonymous> (test/array.js:352:43)

  5) clean Object.prototype Array #findIndex() exists:
     AssertionError: expected [] to have a property 'findIndex'
      at Context.<anonymous> (test/array.js:445:43)

  6) clean Object.prototype Array #fill() exists:
     AssertionError: expected [] to have a property 'fill'
      at Context.<anonymous> (test/array.js:783:43)

  7) clean Object.prototype Array #forEach() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:852:27)

  8) clean Object.prototype Array #map() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:860:27)

  9) clean Object.prototype Array #filter() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:868:27)

  10) clean Object.prototype Array #some() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:876:27)

  11) clean Object.prototype Array #every() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:884:27)

  12) clean Object.prototype Array #reduce() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:892:27)

  13) clean Object.prototype Array #reduceRight() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:903:27)

  14) polluted Object.prototype Array .from() exists:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/array.js:44:33)

  15) polluted Object.prototype Array .of() exists:
     AssertionError: expected [Function: Array] to have a property 'of'
      at Context.<anonymous> (test/array.js:250:33)

  16) polluted Object.prototype Array #copyWithin() exists:
     AssertionError: expected [] to have a property 'copyWithin'
      at Context.<anonymous> (test/array.js:289:43)

  17) polluted Object.prototype Array #find() exists:
     AssertionError: expected [] to have a property 'find'
      at Context.<anonymous> (test/array.js:352:43)

  18) polluted Object.prototype Array #findIndex() exists:
     AssertionError: expected [] to have a property 'findIndex'
      at Context.<anonymous> (test/array.js:445:43)

  19) polluted Object.prototype Array #fill() exists:
     AssertionError: expected [] to have a property 'fill'
      at Context.<anonymous> (test/array.js:783:43)

  20) polluted Object.prototype Array #forEach() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:852:27)

  21) polluted Object.prototype Array #map() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:860:27)

  22) polluted Object.prototype Array #filter() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:868:27)

  23) polluted Object.prototype Array #some() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:876:27)

  24) polluted Object.prototype Array #every() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:884:27)

  25) polluted Object.prototype Array #reduce() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:892:27)

  26) polluted Object.prototype Array #reduceRight() uses ToLength to clamp negative values to zero:
     AssertionError: expected [Function] to not throw 'RangeError' but 'RangeError: should not reach here: length of -1 should clamp to length of 0' was thrown
      at Context.<anonymous> (test/array.js:903:27)

  27) Collections Map should have the right arity:
     AssertionError: expected [Function: Map] to have a property 'length' of 0, but got 1
      at Context.<anonymous> (test/collections.js:97:27)

  28) Collections Map should have an iterator that works with Array.from:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/collections.js:332:29)

  29) Collections Map #forEach should convert key -0 to +0:

      AssertionError: expected '-Infinity a, -Infinity c, 1 b' to equal 'Infinity a, Infinity c, 1 b'
      + expected - actual

      +"Infinity a, Infinity c, 1 b"
      -"-Infinity a, -Infinity c, 1 b"
      
      at Context.<anonymous> (test/collections.js:502:38)

  30) Collections Set has the right arity:
     AssertionError: expected [Function: Set] to have a property 'length' of 0, but got 1
      at Context.<anonymous> (test/collections.js:597:27)

  31) Collections Set should work as expected:

      AssertionError: expected false to equal true
      + expected - actual

      +true
      -false
      
      at test/collections.js:679:32
      at Array.forEach (native)
      at Context.<anonymous> (test/collections.js:656:21)

  32) Collections Set has an iterator that works with Array.from requires Array.from to exist:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/collections.js:814:33)

  33) Collections Set #forEach should convert key -0 to +0:

      AssertionError: expected '-Infinity, -Infinity, 1' to equal 'Infinity, Infinity, 1'
      + expected - actual

      +"Infinity, Infinity, 1"
      -"-Infinity, -Infinity, 1"
      
      at Context.<anonymous> (test/collections.js:1021:38)

  34) Math .acosh() should be correct:
     AssertionError: expected Infinity to be within 710.4758600739339..710.4758600739539
      at Assertion.almostEqual (test/math.js:8:15)
      at Context.<anonymous> (test/math.js:61:47)

  35) Math .sinh() should be correct:

      AssertionError: expected 0 to equal -2e-17
      + expected - actual

      +-2e-17
      -0
      
      at Context.<anonymous> (test/math.js:554:36)

  36) Math .tanh() should be correct:

      AssertionError: expected 0 to equal -2e-17
      + expected - actual

      +-2e-17
      -0
      
      at Context.<anonymous> (test/math.js:585:36)

  37) Object .getOwnPropertyNames() works on primitives:
     TypeError: Object.getOwnPropertyNames called on non-object
      at Function.getOwnPropertyNames (native)
      at test/object.js:26:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:25:45)

  38) Object .getOwnPropertyDescriptor() works on primitives:
     TypeError: Object.getOwnPropertyDescriptor called on non-object
      at Function.getOwnPropertyDescriptor (native)
      at test/object.js:42:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:41:45)

  39) Object .seal() works on primitives:
     TypeError: Object.seal called on non-object
      at Function.seal (native)
      at test/object.js:52:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:51:56)

  40) Object .isSealed() works on primitives:
     TypeError: Object.isSealed called on non-object
      at Function.isSealed (native)
      at test/object.js:62:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:61:56)

  41) Object .freeze() works on primitives:
     TypeError: Object.freeze called on non-object
      at Function.freeze (native)
      at test/object.js:72:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:71:56)

  42) Object .isFrozen() works on primitives:
     TypeError: Object.isFrozen called on non-object
      at Function.isFrozen (native)
      at test/object.js:82:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:81:56)

  43) Object .preventExtensions() works on primitives:
     TypeError: Object.preventExtension called on non-object
      at Function.preventExtensions (native)
      at test/object.js:92:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:91:56)

  44) Object .isExtensible() works on primitives:
     TypeError: Object.isExtensible called on non-object
      at Function.isExtensible (native)
      at test/object.js:102:25
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:101:56)

  45) Object .keys() works on strings:
     TypeError: Object.keys called on non-object
      at Function.keys (native)
      at Context.<anonymous> (test/object.js:110:21)

  46) Object .keys() works on other primitives:
     TypeError: Object.keys called on non-object
      at Function.keys (native)
      at test/object.js:121:23
      at Array.forEach (native)
      at Context.<anonymous> (test/object.js:120:36)

  47) Object .assign() exists:
     AssertionError: expected [Function: Object] to have a property 'assign'
      at Context.<anonymous> (test/object.js:161:32)

  48) Promise does not have extra methods (bad Chrome!):
     AssertionError: expected [Function: Promise] to not have property 'accept'
      at Context.<anonymous> (test/promise.js:18:33)

  49) Reflect exists:
     AssertionError: expected {} to have a property 'Reflect'
      at Context.<anonymous> (test/reflect.js:29:28)

  50) RegExp constructor allows a regex with flags:
     AssertionError: expected [Function] to not throw 'TypeError' but 'TypeError: Cannot supply flags when constructing one RegExp from another' was thrown
      at Context.<anonymous> (test/regexp.js:39:40)

  51) RegExp constructor works with instanceof:
     TypeError: Cannot supply flags when constructing one RegExp from another
      at new RegExp (native)
      at Context.<anonymous> (test/regexp.js:47:14)

  52) RegExp constructor has the right constructor:
     TypeError: Cannot supply flags when constructing one RegExp from another
      at new RegExp (native)
      at Context.<anonymous> (test/regexp.js:53:14)

  53) RegExp constructor toStrings properly:
     TypeError: Cannot supply flags when constructing one RegExp from another
      at new RegExp (native)
      at Context.<anonymous> (test/regexp.js:59:45)

  54) RegExp #flags exists:
     AssertionError: expected /(?:)/ to have a property 'flags'
      at Context.<anonymous> (test/regexp.js:71:42)

  55) RegExp Object properties does not have the nonstandard $input property:
     AssertionError: expected [Function: RegExp] to not have property '$input'
      at Context.<anonymous> (test/regexp.js:145:34)

  56) clean Object.prototype String #repeat() exists:
     AssertionError: expected {} to have a property 'repeat'
      at Context.<anonymous> (test/string.js:28:44)

  57) clean Object.prototype String #startsWith() exists:
     AssertionError: expected {} to have a property 'startsWith'
      at Context.<anonymous> (test/string.js:80:44)

  58) clean Object.prototype String #endsWith() exists:
     AssertionError: expected {} to have a property 'endsWith'
      at Context.<anonymous> (test/string.js:187:44)

  59) clean Object.prototype String #includes() exists:
     AssertionError: expected {} to have a property 'includes'
      at Context.<anonymous> (test/string.js:297:44)

  60) clean Object.prototype String .fromCodePoint() exists:
     AssertionError: expected [Function: String] to have a property 'fromCodePoint'
      at Context.<anonymous> (test/string.js:392:34)

  61) clean Object.prototype String #codePointAt() exists:
     AssertionError: expected {} to have a property 'codePointAt'
      at Context.<anonymous> (test/string.js:444:44)

  62) clean Object.prototype String #[Symbol.iterator]() requires Array.from to test:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/string.js:491:33)

  63) clean Object.prototype String .raw() exists:
     AssertionError: expected [Function: String] to have a property 'raw'
      at Context.<anonymous> (test/string.js:511:34)

  64) polluted Object.prototype String #repeat() exists:
     AssertionError: expected {} to have a property 'repeat'
      at Context.<anonymous> (test/string.js:28:44)

  65) polluted Object.prototype String #startsWith() exists:
     AssertionError: expected {} to have a property 'startsWith'
      at Context.<anonymous> (test/string.js:80:44)

  66) polluted Object.prototype String #endsWith() exists:
     AssertionError: expected {} to have a property 'endsWith'
      at Context.<anonymous> (test/string.js:187:44)

  67) polluted Object.prototype String #includes() exists:
     AssertionError: expected {} to have a property 'includes'
      at Context.<anonymous> (test/string.js:297:44)

  68) polluted Object.prototype String .fromCodePoint() exists:
     AssertionError: expected [Function: String] to have a property 'fromCodePoint'
      at Context.<anonymous> (test/string.js:392:34)

  69) polluted Object.prototype String #codePointAt() exists:
     AssertionError: expected {} to have a property 'codePointAt'
      at Context.<anonymous> (test/string.js:444:44)

  70) polluted Object.prototype String #[Symbol.iterator]() requires Array.from to test:
     AssertionError: expected [Function: Array] to have a property 'from'
      at Context.<anonymous> (test/string.js:491:33)

  71) polluted Object.prototype String .raw() exists:
     AssertionError: expected [Function: String] to have a property 'raw'
      at Context.<anonymous> (test/string.js:511:34)

  72) Promise.all fulfills if passed an empty array-like:
     TypeError: invalid_argument
      at Function.all (native)
      at f (test/promise/all.js:27:15)
      at Context.<anonymous> (test/promise/all.js:32:5)

  73) Promise.all should be robust against tampering (3):
     Error: should not reach here!
      at test/promise/all.js:151:15

  74) Promise.all should be robust against tampering (4):
     TypeError: [object Object] is not a promise
      at new P (test/promise/all.js:163:17)
      at Function.defer (native)
      at Function.all (native)
      at Context.<anonymous> (test/promise/all.js:188:7)

  75) Evil promises should not be able to break invariants resolving to a promise that calls onFulfilled twice:
     TypeError: [object Object] is not a promise
      at new EvilPromise (test/promise/evil-promises.js:9:53)
      at Function.resolve (native)
      at Context.<anonymous> (test/promise/evil-promises.js:16:35)

  76) Promises/ES6 Tests incorrect subclassing: 25.4.1.6.1 step 8 invalid 'resolve': throws TypeError with Promise.reject:
     AssertionError: expected [Function] to throw TypeError
  

  77) Promises/ES6 Tests incorrect subclassing: 25.4.1.6.1 step 8 invalid 'resolve': throws TypeError with Promise.all:
     AssertionError: expected [Function] to throw TypeError
  

  78) Promises/ES6 Tests incorrect subclassing: 25.4.1.6.1 step 8 invalid 'resolve': throws TypeError with Promise.race:
     AssertionError: expected [Function] to throw TypeError
  

  79) Promises/ES6 Tests incorrect subclassing: 25.4.1.6.1 step 9 invalid 'reject' throws TypeError with Promise.resolve:
     AssertionError: expected [Function] to throw TypeError
  

  80) Support user subclassing of Promise should work if you do it right:
     TypeError: [object Object] is not a promise
      at new MyPromise (test/promise/subclass.js:10:15)
      at Function.resolve (native)
      at Context.<anonymous> (test/promise/subclass.js:20:24)



